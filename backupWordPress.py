#!/usr/bin/env python
import os
import tarfile
import subprocess
import dropbox
import time
from datetime import date
from dropbox.files import WriteMode
from dropbox.exceptions import ApiError, AuthError
import sys

today = str(date.today())
wpPath = '/var/www/html' #make sure this points to WordPress Directory 
dbx = dropbox.Dropbox("_hoPU6Q9B0AAAAAAAAAACrx8acFUf2Z1842UdzozXZ8F0kkUstR6KH6O4MpJ0hF5") #access token generated by DropBox 
#https://www.dropbox.com/developers/apps

files = []

if(os.path.isdir(wpPath) == False): # check to see if it is a directory
	print "WordPress Directory is not " + wpPath + "\n"
	wpPath = raw_input("Please specify the directory that contains all your WordPress folders: ") #prompting user to enter WordPress Directory

for x in os.listdir(wpPath):
	if os.path.isdir(wpPath + '/' + x):
		os.chdir(wpPath + '/' + x )
		if "wp-config.php" in os.listdir('./'):
			cleanSQL = os.listdir(wpPath + '/' + x)
			for items in cleanSQL:
				if items.endswith(".sql"):
					os.chdir(wpPath + '/' + x)
					c = subprocess.Popen("sudo rm *.sql", shell=True)
					c.communicate()
					print "deleting sql file"
print "Done"
time.sleep(3)

for x in os.listdir(wpPath): #check if files in WordPress folder are directories
	if os.path.isdir(wpPath + '/' + x):
		os.chdir(wpPath + '/' + x )
		if "wp-config.php" in os.listdir('./'):
			d = subprocess.call(["sudo", "wp", "db", "export", "--allow-root"]) #exporting sql database file
			#d.communicate()
			os.chdir("../")
			cmd = ["sudo", "tar", "-cvzf", today + "_" + x + "-backup.tar.gz", x] 
			p = subprocess.call(cmd) # compressing each WordPress folder with database file
			#if p.returncode != 0:
			#	time.sleep(30)
			#tar = tarfile.open(today + "_" + x + "-backup.tar.gz", "w:gz")
			#tar.add(x, recursive=True)
			files.append(today + "_" + x + "-backup.tar.gz")

		else:
			print "Not a WordPress Directory"

time.sleep(3)
if not files:
	print "No WordPress Directories in specified path"
else:
	for a in files:
		with open(a) as f:
			file_size = os.path.getsize(a)

			CHUNK_SIZE = 4 * 1024 * 1024
			dest_path = "/" + a
			if file_size <= CHUNK_SIZE:

   				print dbx.files_upload(f, dest_path)

			else:

    				upload_session_start_result = dbx.files_upload_session_start(f.read(CHUNK_SIZE))
    				cursor = dropbox.files.UploadSessionCursor(session_id=upload_session_start_result.session_id, offset=f.tell())
    				commit = dropbox.files.CommitInfo(path=dest_path)

    				while f.tell() < file_size:
        				if ((file_size - f.tell()) <= CHUNK_SIZE):
            					print dbx.files_upload_session_finish(f.read(CHUNK_SIZE), cursor, commit)
        				else:
            					dbx.files_upload_session_append(f.read(CHUNK_SIZE), cursor.session_id, cursor.offset)
            					cursor.offset = f.tell()

cleanTARGZ = os.listdir(wpPath)
os.chdir(wpPath)
for items in cleanTARGZ:
	if items.endswith(".tar.gz"):
		os.chdir(wpPath)
		subprocess.call("sudo rm *.tar.gz", shell=True, stderr=subprocess.PIPE)
